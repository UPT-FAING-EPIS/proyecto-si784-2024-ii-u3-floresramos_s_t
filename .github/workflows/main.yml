name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  tests-and-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore packages
        run: |
          cd PROYECTO_PDF
          dotnet restore
          
      - name: Run tests with coverage
        run: |
          cd PROYECTO_PDF/NegocioPDF.Tests
          dotnet test --filter "FullyQualifiedName!~UITests.SubscriptionTests" --collect:"XPlat Code Coverage"

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: '**/PROYECTO_PDF/**/coverage.cobertura.xml'
          targetdir: coveragereport
          reporttypes: Html;MarkdownSummary;MarkdownAssembliesSummary;MarkdownSummaryGithub

      - name: Prepare Coverage Report
        run: |
          mkdir -p reports/coverage
          cp -r coveragereport/* reports/coverage/

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport 
          path: coveragereport 

      - name: Publish coverage in build summary
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY 
        shell: bash

      - name: Install Tools
        run: |
          dotnet tool install -g dotnet-stryker
        
      - name: Run Stryker
        run: |
          cd PROYECTO_PDF/NegocioPDF.Tests
          echo "Running Stryker from: $(pwd)"
          dotnet stryker || true
          
          mkdir -p ../../reports/mutation
          
          latest_report=$(find StrykerOutput -type d -name "202*" | sort | tail -n 1)
          if [ -d "$latest_report/reports" ]; then
            echo "Copying mutation report from: $latest_report/reports"
            cp -r $latest_report/reports/* ../../reports/mutation/
            if [ -f "../../reports/mutation/mutation-report.html" ]; then
              echo "Mutation report successfully copied"
            else
              echo "Failed to copy mutation-report.html"
            fi
          else
            echo "No mutation report found in $latest_report"
            echo "<html><body><h1>Mutation Report</h1><p>No results available</p></body></html>" > ../../reports/mutation/mutation-report.html
          fi

      # Security Analysis
      - name: Run Semgrep
        run: |
          docker pull semgrep/semgrep
          mkdir -p reports/security
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output reports/security/semgrep.json

      - name: Install prospector-html
        run: python -m pip install prospector2html

      - name: Convert Semgrep results to HTML
        run: |
          cd reports/security
          prospector-html --input semgrep.json --output semgrep-report.html --filter semgrep || true
      
      # Snyk Analysis
      - uses: snyk/actions/setup@master
      
      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          mkdir -p reports/security
          snyk code test --json | snyk-to-html -o reports/security/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # BDD Tests
      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          mkdir -p reports/bdd
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o ../reports/bdd/bdd-report.html
      # UI Tests Section
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright Dependencies
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps chromium
          echo "::notice title=UI Setup::Playwright instalado correctamente"

      - name: Start Application
        run: |
          cd PROYECTO_PDF
          dotnet run --project "PROYECTOPDF/PROYECTOPDF.csproj" --urls http://localhost:5260 &
          echo "Waiting for application to start..."
          sleep 15

      - name: Run UI Tests
        run: |
          cd PROYECTO_PDF/NegocioPDF.Tests
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" dotnet test --filter "FullyQualifiedName~UITests"

      - name: Prepare UI Test Report
        if: always()
        run: |
          mkdir -p reports/ui-tests/videos
          mkdir -p reports/ui-tests/screenshots
          
          # Copiar videos y screenshots si existen
          cp -r PROYECTO_PDF/NegocioPDF.Tests/bin/Debug/net8.0/videos/* reports/ui-tests/videos/ || true
          cp -r PROYECTO_PDF/NegocioPDF.Tests/bin/Debug/net8.0/*.png reports/ui-tests/screenshots/ || true
          
          # Crear índice HTML para UI tests
          cat > reports/ui-tests/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>UI Test Results</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
              }
              .section {
                margin: 20px 0;
                padding: 20px;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .video-container {
                margin: 10px 0;
              }
              .screenshot-container {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
                margin: 20px 0;
              }
              .screenshot {
                width: 100%;
                border-radius: 4px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              video {
                max-width: 100%;
                margin: 10px 0;
              }
            </style>
          </head>
          <body>
            <h1>UI Test Results</h1>
            
            <div class="section">
              <h2>Test Videos</h2>
              <div class="video-container">
                <!-- Videos serán listados aquí -->
                <script>
                  fetch('videos/')
                    .then(response => response.text())
                    .then(text => {
                      const videos = text.match(/href="([^"]+\.webm)"/g) || [];
                      videos.forEach(video => {
                        const src = video.match(/href="([^"]+)"/)[1];
                        document.querySelector('.video-container').innerHTML += `
                          <div>
                            <h3>${src}</h3>
                            <video controls>
                              <source src="videos/${src}" type="video/webm">
                              Your browser does not support the video tag.
                            </video>
                          </div>
                        `;
                      });
                    });
                </script>
              </div>
            </div>
            
            <div class="section">
              <h2>Screenshots</h2>
              <div class="screenshot-container">
                <!-- Screenshots serán listados aquí -->
                <script>
                  fetch('screenshots/')
                    .then(response => response.text())
                    .then(text => {
                      const images = text.match(/href="([^"]+\.png)"/g) || [];
                      images.forEach(image => {
                        const src = image.match(/href="([^"]+)"/)[1];
                        document.querySelector('.screenshot-container').innerHTML += `
                          <div>
                            <img class="screenshot" src="screenshots/${src}" alt="${src}">
                            <p>${src}</p>
                          </div>
                        `;
                      });
                    });
                </script>
              </div>
            </div>
          </body>
          </html>
          EOF
      # Create Dashboard
       # Create Dashboard with Coverage Link
      - name: Create Dashboard
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Testing Results Dashboard</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                background-color: #f5f5f5;
              }
              .card { 
                border: 1px solid #ddd; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                background-color: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .card h2 {
                color: #333;
                margin-top: 0;
                border-bottom: 2px solid #2196F3;
                padding-bottom: 10px;
              }
              .metric { 
                font-size: 24px; 
                color: #2196F3; 
              }
              a {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 5px;
              }
              a:hover {
                background-color: #1976D2;
              }
              .report-links {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
              }
            </style>
          </head>
          <body>
            <h1>Testing Results Dashboard</h1>
            
            <div class="card">
              <h2>Security Analysis</h2>
              <div class="report-links">
                <a href="security/semgrep-report.html">Semgrep Report</a>
                <a href="security/snyk-report.html">Snyk Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>Coverage Report</h2>
              <div class="report-links">
                <a href="coverage/index.html">View Coverage Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>BDD Test Results</h2>
              <div class="report-links">
                <a href="bdd/bdd-report.html">View BDD Test Report</a>
              </div>
            </div>

            <div class="card">
              <h2>Mutation Testing</h2>
              <div class="report-links">
                <a href="mutation/mutation-report.html">View Mutation Report</a>
              </div>
            </div>
            <div class="card">
            <h2>UI Test Results</h2>
            <div class="report-links">
              <a href="ui-tests/index.html">View UI Test Report</a>
            </div>
          </div>
          </body>
          </html>
          EOF
      - name: Upload UI artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results
          path: |
            PROYECTO_PDF/NegocioPDF.Tests/bin/Debug/net8.0/videos/
            PROYECTO_PDF/NegocioPDF.Tests/bin/Debug/net8.0/*.png
          retention-days: 14

      - name: Publish UI Test Results in Summary
        if: always()
        run: |
          echo "## UI Test Results" >> $GITHUB_STEP_SUMMARY
          echo "* Tests Executed:" >> $GITHUB_STEP_SUMMARY
          echo "  - LoginTests" >> $GITHUB_STEP_SUMMARY
          echo "  - RegisterTests" >> $GITHUB_STEP_SUMMARY
          echo "  - NavigationTests" >> $GITHUB_STEP_SUMMARY
          echo "  - PDFGenerationTests" >> $GITHUB_STEP_SUMMARY
      # Extract coverage metrics
      - name: Extract Coverage Metrics
        run: |
          if [ -f coveragereport/Summary.md ]; then
            total=$(grep -o 'Line coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
            branch=$(grep -o 'Branch coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
            method=$(grep -o 'Method coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
            echo "::notice title=Coverage Results::Line Coverage: ${total}, Branch Coverage: ${branch}, Method Coverage: ${method}"
          fi

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          force_orphan: true
