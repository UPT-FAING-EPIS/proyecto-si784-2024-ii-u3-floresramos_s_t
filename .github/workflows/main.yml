name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  generate-and-publish:
    name: Generate Reports and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Semgrep Analysis
      - name: Run Semgrep
        run: |
          docker pull semgrep/semgrep
          mkdir -p reports/security
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output reports/security/semgrep.json

      - name: Install prospector-html
        run: python -m pip install prospector2html

      - name: Convert Semgrep results to HTML
        run: |
          cd reports/security
          prospector-html --input semgrep.json --output semgrep-report.html --filter semgrep || true
      
      # Snyk Analysis
      - uses: snyk/actions/setup@master
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          mkdir -p reports/security
          snyk code test --json | snyk-to-html -o reports/security/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      # BDD Tests
      - name: Restore dependencies
        run: |
          cd PROYECTO_PDF
          dotnet restore
      
      - name: Build
        run: |
          cd PROYECTO_PDF
          dotnet build --no-restore
      
      - name: Run BDD Tests
        run: |
          cd PROYECTO_PDF
          mkdir -p TestResults
          dotnet test --filter "Category=BDD" --no-build --verbosity normal --logger "trx;LogFileName=TestResults/bdd-results.trx"
      
      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          mkdir -p reports/bdd
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o ../reports/bdd/bdd-report.html

      # Extract and format BDD results for summary
      - name: Process BDD Results for Summary
        run: |
          echo "# 🧪 BDD Test Results" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution Overview" >> $GITHUB_STEP_SUMMARY
          
          # Instalar herramientas necesarias
          sudo apt-get update && sudo apt-get install -y xsltproc xmlstarlet
          
          if [ -f "PROYECTO_PDF/TestResults/bdd-results.trx" ]; then
            # Extraer resultados con xmlstarlet
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            xmlstarlet sel -t \
              -m "//UnitTestResult" \
              -v "concat(@testName, ': ', @outcome)" -n \
              PROYECTO_PDF/TestResults/bdd-results.trx >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Calcular estadísticas
            total=$(xmlstarlet sel -t -v "count(//UnitTestResult)" PROYECTO_PDF/TestResults/bdd-results.trx)
            passed=$(xmlstarlet sel -t -v "count(//UnitTestResult[@outcome='Passed'])" PROYECTO_PDF/TestResults/bdd-results.trx)
            failed=$(xmlstarlet sel -t -v "count(//UnitTestResult[@outcome='Failed'])" PROYECTO_PDF/TestResults/bdd-results.trx)
            
            echo "### 📊 Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- Total Tests: $total" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Passed: $passed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Failed: $failed" >> $GITHUB_STEP_SUMMARY
            
            if [ $total -gt 0 ]; then
              success_rate=$(( (passed * 100) / total ))
              echo "- 📈 Success Rate: $success_rate%" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Extraer contenido del reporte HTML si existe
          if [ -f "reports/bdd/bdd-report.html" ]; then
            echo "## 📋 Detailed Feature Results" >> $GITHUB_STEP_SUMMARY
            echo "### Features and Scenarios" >> $GITHUB_STEP_SUMMARY
            
            # Instalar y usar html2text para extraer el contenido relevante
            sudo apt-get install -y html2text
            
            # Procesar el HTML y extraer las secciones relevantes
            html2text -width 100 -style pretty reports/bdd/bdd-report.html | \
            awk '/Feature:/{p=1}/References:/{p=0}p' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Complete HTML Report](./reports/bdd/bdd-report.html)" >> $GITHUB_STEP_SUMMARY

      # Create main dashboard
      - name: Create Dashboard
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Testing Results Dashboard</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                background-color: #f5f5f5;
              }
              .card { 
                border: 1px solid #ddd; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                background-color: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .card h2 {
                color: #333;
                margin-top: 0;
                border-bottom: 2px solid #2196F3;
                padding-bottom: 10px;
              }
              .metric { 
                font-size: 24px; 
                color: #2196F3; 
              }
              a {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 5px;
              }
              a:hover {
                background-color: #1976D2;
              }
              .report-links {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
              }
            </style>
          </head>
          <body>
            <h1>Testing Results Dashboard</h1>
            
            <div class="card">
              <h2>Security Analysis</h2>
              <div class="report-links">
                <a href="security/semgrep-report.html">Semgrep HTML Report</a>
                <a href="security/semgrep.json">Semgrep JSON Report</a>
                <a href="security/snyk-report.html">Snyk Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>BDD Test Results</h2>
              <a href="bdd/bdd-report.html">View BDD Test Report</a>
            </div>
          </body>
          </html>
          EOF

      # Deploy to gh-pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          force_orphan: true
