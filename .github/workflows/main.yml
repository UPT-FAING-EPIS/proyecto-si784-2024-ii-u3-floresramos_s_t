name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  generate-and-publish:
    name: Generate Reports and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Semgrep Analysis with HTML Report
      - name: Run Semgrep and Generate HTML
        run: |
          docker pull semgrep/semgrep
          mkdir -p reports/security
          
          # Crear archivo de estilo para el reporte HTML
          cat > semgrep-style.css << 'EOF'
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
          }
          .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          .finding {
            border: 1px solid #ddd;
            margin: 10px 0;
            padding: 15px;
            border-radius: 4px;
          }
          .finding.critical { border-left: 5px solid #dc3545; }
          .finding.high { border-left: 5px solid #fd7e14; }
          .finding.medium { border-left: 5px solid #ffc107; }
          .finding.low { border-left: 5px solid #20c997; }
          .finding h3 {
            margin-top: 0;
            color: #333;
          }
          .meta {
            font-size: 0.9em;
            color: #666;
            margin: 5px 0;
          }
          .code {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            white-space: pre-wrap;
          }
          .severity {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            color: white;
            font-weight: bold;
          }
          .severity.critical { background-color: #dc3545; }
          .severity.high { background-color: #fd7e14; }
          .severity.medium { background-color: #ffc107; color: black; }
          .severity.low { background-color: #20c997; }
          EOF

          # Ejecutar Semgrep y crear reporte HTML
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json | \
          python3 -c '
import json
import sys
import html

def severity_class(severity):
    return severity.lower() if severity else "low"

def create_html(findings):
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Semgrep Security Analysis Report</title>
        <link rel="stylesheet" type="text/css" href="semgrep-style.css">
    </head>
    <body>
        <div class="container">
            <h1>Semgrep Security Analysis Report</h1>
    """
    
    # Add summary
    total = len(findings)
    by_severity = {}
    for finding in findings:
        severity = finding.get("extra", {}).get("severity", "unknown")
        by_severity[severity] = by_severity.get(severity, 0) + 1
    
    html_content += "<div class=\"summary\">"
    html_content += f"<h2>Summary</h2>"
    html_content += f"<p>Total findings: {total}</p>"
    for severity, count in by_severity.items():
        html_content += f"<p>{severity}: {count}</p>"
    html_content += "</div>"
    
    # Add findings
    for finding in findings:
        severity = finding.get("extra", {}).get("severity", "low")
        html_content += f"""
        <div class="finding {severity_class(severity)}">
            <h3>{html.escape(finding.get("check_id", ""))}</h3>
            <span class="severity {severity_class(severity)}">{severity.upper()}</span>
            <div class="meta">
                <p><strong>Path:</strong> {html.escape(finding.get("path", ""))}</p>
                <p><strong>Line:</strong> {finding.get("start", {}).get("line", "")}</p>
            </div>
            <p>{html.escape(finding.get("extra", {}).get("message", ""))}</p>
            <div class="code">{html.escape(finding.get("extra", {}).get("lines", ""))}</div>
        </div>
        """
    
    html_content += """
        </div>
    </body>
    </html>
    """
    return html_content

data = json.load(sys.stdin)
findings = data.get("results", [])
print(create_html(findings))
          ' > reports/security/semgrep-report.html

          # Copiar el archivo de estilos
          cp semgrep-style.css reports/security/
      
      # Snyk Analysis
      - uses: snyk/actions/setup@master
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          mkdir -p reports/security
          snyk code test --json | snyk-to-html -o reports/security/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      # BDD Tests
      - name: Restore dependencies
        run: |
          cd PROYECTO_PDF
          dotnet restore
      
      - name: Build
        run: |
          cd PROYECTO_PDF
          dotnet build --no-restore
      
      - name: Run BDD Tests
        run: |
          cd PROYECTO_PDF
          dotnet test --filter "Category=BDD" --no-build --verbosity normal
      
      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          mkdir -p reports/bdd
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o ../reports/bdd/bdd-report.html

      # Create main dashboard
      - name: Create Dashboard
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Testing Results Dashboard</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                background-color: #f5f5f5;
              }
              .card { 
                border: 1px solid #ddd; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                background-color: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .card h2 {
                color: #333;
                margin-top: 0;
                border-bottom: 2px solid #2196F3;
                padding-bottom: 10px;
              }
              .metric { 
                font-size: 24px; 
                color: #2196F3; 
              }
              a {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 5px;
              }
              a:hover {
                background-color: #1976D2;
              }
              .report-links {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
              }
            </style>
          </head>
          <body>
            <h1>Testing Results Dashboard</h1>
            
            <div class="card">
              <h2>Security Analysis</h2>
              <div class="report-links">
                <a href="security/semgrep-report.html">Semgrep Report</a>
                <a href="security/snyk-report.html">Snyk Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>BDD Test Results</h2>
              <a href="bdd/bdd-report.html">View BDD Test Report</a>
            </div>
          </body>
          </html>
          EOF

      # Deploy to gh-pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          force_orphan: true
