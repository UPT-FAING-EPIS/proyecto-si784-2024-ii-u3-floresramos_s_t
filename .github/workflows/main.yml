name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  tests-and-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore packages
        run: |
          cd PROYECTO_PDF
          dotnet restore
          
      - name: Run tests with coverage
        run: |
          cd PROYECTO_PDF/NegocioPDF.Tests
          dotnet test --filter "FullyQualifiedName!~UITests.SubscriptionTests" --collect:"XPlat Code Coverage"

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: '**/PROYECTO_PDF/**/coverage.cobertura.xml'
          targetdir: coveragereport
          reporttypes: Html;MarkdownSummary;MarkdownAssembliesSummary;MarkdownSummaryGithub

      - name: Prepare Coverage Report
        run: |
          mkdir -p reports/coverage
          cp -r coveragereport/* reports/coverage/

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport 
          path: coveragereport 

      - name: Publish coverage in build summary
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY 
        shell: bash

      - name: Install Tools
        run: |
          dotnet tool install -g dotnet-stryker
        
      - name: Run Stryker
        run: |
          cd PROYECTO_PDF/NegocioPDF.Tests
          echo "Running Stryker from: $(pwd)"
          dotnet stryker || true
          
          mkdir -p ../../reports/mutation
          
          latest_report=$(find StrykerOutput -type d -name "202*" | sort | tail -n 1)
          if [ -d "$latest_report/reports" ]; then
            echo "Copying mutation report from: $latest_report/reports"
            cp -r $latest_report/reports/* ../../reports/mutation/
            if [ -f "../../reports/mutation/mutation-report.html" ]; then
              echo "Mutation report successfully copied"
            else
              echo "Failed to copy mutation-report.html"
            fi
          else
            echo "No mutation report found in $latest_report"
            echo "<html><body><h1>Mutation Report</h1><p>No results available</p></body></html>" > ../../reports/mutation/mutation-report.html
          fi

      - name: Run Semgrep
        run: |
          docker pull semgrep/semgrep
          mkdir -p reports/security
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output reports/security/semgrep.json

      - name: Install prospector-html
        run: python -m pip install prospector2html

      - name: Convert Semgrep results to HTML
        run: |
          cd reports/security
          prospector-html --input semgrep.json --output semgrep-report.html --filter semgrep || true
      
      - uses: snyk/actions/setup@master
      
      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          mkdir -p reports/security
          snyk code test --json | snyk-to-html -o reports/security/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          mkdir -p reports/bdd
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o ../reports/bdd/bdd-report.html
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-artifact
          path: reports
  ui-test:
    name: UI Tests with Playwright
    runs-on: ubuntu-latest
    needs: [tests-and-coverage]
    steps:
        - uses: actions/checkout@v4
        - name: Download Previous Reports
          uses: actions/download-artifact@v4
          with:
            name: reports-artifact
            path: reports
        - name: Set up .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: ${{ env.DOTNET_VERSION }}

        - name: Restore dependencies
          working-directory: PROYECTO_PDF
          run: dotnet restore

        - name: Build project
          working-directory: PROYECTO_PDF
          run: dotnet build --configuration Release --no-restore

        - name: Install Playwright and dependencies
          working-directory: PROYECTO_PDF/NegocioPDF.Tests
          run: |
            dotnet tool install --global Microsoft.Playwright.CLI
            dotnet build
            pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
            
        # Crear directorio playwright dentro de reports
        - name: Create playwright directory
          run: mkdir -p reports/playwright
            
        - name: Run Playwright tests
          working-directory: PROYECTO_PDF/NegocioPDF.Tests
          run: |
            dotnet test --filter "FullyQualifiedName~UITests.SubscriptionTests" || true

        - name: Copy Test Results
          if: always()
          run: |
            # Copiar capturas de pantalla
            find PROYECTO_PDF/NegocioPDF.Tests -name "*.png" -exec cp {} reports/playwright/ \;
            
            # Copiar videos si existen
            if [ -d "PROYECTO_PDF/NegocioPDF.Tests/videos" ]; then
              cp -r PROYECTO_PDF/NegocioPDF.Tests/videos reports/playwright/
            fi

        - name: Generate HTML Report
          run: |
            cat > reports/playwright/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Playwright Test Results</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                    img { max-width: 100%; margin: 10px 0; }
                    .video { margin: 10px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Playwright Test Results</h1>
                    <div class="section">
                        <h2>Screenshots</h2>
                        <div id="screenshots"></div>
                    </div>
                    <div class="section">
                        <h2>Videos</h2>
                        <div id="videos"></div>
                    </div>
                </div>
                <script>
                    // Script para cargar dinámicamente las imágenes y videos
                    fetch('.')
                        .then(response => response.text())
                        .then(text => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(text, 'text/html');
                            
                            // Procesar screenshots
                            const screenshots = Array.from(doc.querySelectorAll('a'))
                                .filter(a => a.href.endsWith('.png'))
                                .map(a => a.href);
                            
                            screenshots.forEach(src => {
                                const img = document.createElement('img');
                                img.src = src.split('/').pop();
                                document.getElementById('screenshots').appendChild(img);
                            });
                            
                            // Procesar videos
                            const videos = Array.from(doc.querySelectorAll('a'))
                                .filter(a => a.href.endsWith('.webm'))
                                .map(a => a.href);
                            
                            videos.forEach(src => {
                                const video = document.createElement('video');
                                video.src = 'videos/' + src.split('/').pop();
                                video.controls = true;
                                video.className = 'video';
                                document.getElementById('videos').appendChild(video);
                            });
                        });
                </script>
            </body>
            </html>
            EOF

        - name: Upload Updated Reports
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: reports-artifact
            path: reports
            overwrite: true
        - name: Create Dashboard
          run: |
            cat > reports/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
              <title>Testing Results Dashboard</title>
              <style>
                body { 
                  font-family: Arial; 
                  max-width: 1200px; 
                  margin: 0 auto; 
                  padding: 20px; 
                  background-color: #f5f5f5;
                }
                .card { 
                  border: 1px solid #ddd; 
                  padding: 20px; 
                  margin: 20px 0; 
                  border-radius: 8px;
                  background-color: white;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .card h2 {
                  color: #333;
                  margin-top: 0;
                  border-bottom: 2px solid #2196F3;
                  padding-bottom: 10px;
                }
                .metric { 
                  font-size: 24px; 
                  color: #2196F3; 
                }
                a {
                  display: inline-block;
                  padding: 10px 20px;
                  background-color: #2196F3;
                  color: white;
                  text-decoration: none;
                  border-radius: 4px;
                  transition: background-color 0.3s;
                  margin: 5px;
                }
                a:hover {
                  background-color: #1976D2;
                }
                .report-links {
                  display: flex;
                  gap: 10px;
                  flex-wrap: wrap;
                }
              </style>
            </head>
            <body>
              <h1>Testing Results Dashboard</h1>
              
              <div class="card">
                <h2>Security Analysis</h2>
                <div class="report-links">
                  <a href="security/semgrep-report.html">Semgrep Report</a>
                  <a href="security/snyk-report.html">Snyk Report</a>
                </div>
              </div>
              
              <div class="card">
                <h2>Coverage Report</h2>
                <div class="report-links">
                  <a href="coverage/index.html">View Coverage Report</a>
                </div>
              </div>
              
              <div class="card">
                <h2>BDD Test Results</h2>
                <div class="report-links">
                  <a href="bdd/bdd-report.html">View BDD Test Report</a>
                </div>
              </div>
  
              <div class="card">
                <h2>Mutation Testing</h2>
                <div class="report-links">
                  <a href="mutation/mutation-report.html">View Mutation Report</a>
                </div>
              </div>
              
              <div class="card">
                <h2>SonarQube Analysis</h2>
                <div class="report-links">
                  <a href="https://sonarcloud.io/dashboard?id=mario-flores_proyectopdf" target="_blank">View SonarQube Dashboard</a>
                </div>
            <div class="card">
                  <h2>Playwright Test Results</h2>
                  <div class="report-links">
                      <a href="playwright/index.html">View Playwright Results</a>
                  </div>
              </div>
              </div>
  
              </div>
            </body>
            </html>
            EOF
  
        - name: Extract Coverage Metrics
          run: |
            if [ -f coveragereport/Summary.md ]; then
              total=$(grep -o 'Line coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
              branch=$(grep -o 'Branch coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
              method=$(grep -o 'Method coverage: [0-9]*\.[0-9]*%' coveragereport/Summary.md | cut -d' ' -f3)
              echo "::notice title=Coverage Results::Line Coverage: ${total}, Branch Coverage: ${branch}, Method Coverage: ${method}"
            fi
  
        - name: Deploy to GitHub Pages
          uses: peaceiris/actions-gh-pages@v3
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./reports
            force_orphan: true

  sonarqube:
    name: SonarQube Analysis
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean Playwright folders
        shell: powershell
        run: |
          Get-ChildItem -Path . -Directory -Recurse -Filter ".playwright" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Begin SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"mario-flores_proyectopdf" `
            /o:"mario-flores" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**/*Tests*.cs,**/obj/**,**/bin/**" `
            /d:sonar.exclusions="**/*.js,**/*.css,**/*.html,**/*Tests*.cs,**/obj/**,**/bin/**,**/.playwright/**" `
            /d:sonar.sources="PROYECTO_PDF/NegocioPDF/**/*.cs" `
            /d:sonar.tests="PROYECTO_PDF/NegocioPDF.Tests/**/*.cs" `
            /d:sonar.test.exclusions="**/obj/**,**/bin/**,**/*UITests*/**,**/*SubscriptionTests.cs" `
            /d:sonar.verbose=true

      - name: Build NegocioPDF
        shell: powershell
        run: |
          dotnet restore PROYECTO_PDF/NegocioPDF/NegocioPDF.csproj --ignore-failed-sources
          dotnet build PROYECTO_PDF/NegocioPDF/NegocioPDF.csproj --configuration Release --no-restore

      - name: Build Tests (excluding Playwright)
        shell: powershell
        run: |
          dotnet restore PROYECTO_PDF/NegocioPDF.Tests/NegocioPDF.Tests.csproj /p:DisablePlaywright=true
          dotnet build PROYECTO_PDF/NegocioPDF.Tests/NegocioPDF.Tests.csproj --configuration Release --no-restore

      - name: Run Tests (excluding UI Tests)
        shell: powershell
        run: |
          dotnet test PROYECTO_PDF/NegocioPDF.Tests/NegocioPDF.Tests.csproj `
            --configuration Release `
            --no-build `
            --collect:"XPlat Code Coverage;Format=opencover" `
            --results-directory TestResults `
            --logger trx `
            --verbosity normal `
            --filter "FullyQualifiedName!~UITests.SubscriptionTests"

      - name: End SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
