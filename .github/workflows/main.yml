name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  security-analysis:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Semgrep
      - name: Run Semgrep
        run: |
          docker pull semgrep/semgrep
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output semgrep-results.json
      
      # Snyk
      - uses: snyk/actions/setup@master
      
      - name: Set up .NET version
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          snyk code test --json | snyk-to-html -o snyk-report.html
          echo "::notice title=Snyk::AnÃ¡lisis de Snyk completado"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Save artifacts for later use
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            semgrep-results.json
            snyk-report.html
          retention-days: 1

  bdd:
    name: BDD Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: |
          cd PROYECTO_PDF
          dotnet restore
      
      - name: Build
        run: |
          cd PROYECTO_PDF
          dotnet build --no-restore
      
      - name: Run BDD Tests
        run: |
          cd PROYECTO_PDF
          dotnet test --filter "Category=BDD" --no-build --verbosity normal --logger "trx;LogFileName=bdd-results.trx"
      
      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o bdd-report.html

      # Save artifacts for later use
      - name: Upload BDD Report
        uses: actions/upload-artifact@v3
        with:
          name: bdd-report
          path: PROYECTO_PDF/bdd-report.html
          retention-days: 1

  publish-dashboard:
    needs: [security-analysis, bdd]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Download all reports
      - name: Download Security Reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: reports/security

      - name: Download BDD Report
        uses: actions/download-artifact@v3
        with:
          name: bdd-report
          path: reports/bdd

      - name: Prepare Dashboard
        run: |
          mkdir -p _site
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Testing Results Dashboard</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                background-color: #f5f5f5;
              }
              .card { 
                border: 1px solid #ddd; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                background-color: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .card h2 {
                color: #333;
                margin-top: 0;
                border-bottom: 2px solid #2196F3;
                padding-bottom: 10px;
              }
              .metric { 
                font-size: 24px; 
                color: #2196F3; 
              }
              a {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 5px;
              }
              a:hover {
                background-color: #1976D2;
              }
              .report-links {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
              }
            </style>
          </head>
          <body>
            <h1>Testing Results Dashboard</h1>
            
            <div class="card">
              <h2>Security Analysis</h2>
              <div class="report-links">
                <a href="./reports/security/semgrep-results.json">Semgrep Report</a>
                <a href="./reports/security/snyk-report.html">Snyk Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>BDD Test Results</h2>
              <a href="./reports/bdd/bdd-report.html">View BDD Test Report</a>
            </div>
          </body>
          </html>
          EOF

      # Copy reports to the _site directory
      - name: Copy Reports
        run: |
          mkdir -p _site/reports/security
          mkdir -p _site/reports/bdd
          cp -r reports/security/* _site/reports/security/
          cp -r reports/bdd/* _site/reports/bdd/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
