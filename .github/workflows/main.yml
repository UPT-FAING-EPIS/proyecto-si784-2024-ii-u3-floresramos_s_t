name: Unified Testing & Analysis Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  generate-and-publish:
    name: Generate Reports and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Semgrep Analysis with HTML report
      - name: Run Semgrep
        run: |
          docker pull semgrep/semgrep
          mkdir -p reports/security
          # Generar reporte JSON
          docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output reports/security/semgrep-results.json
          # Convertir JSON a HTML
          cat > reports/security/semgrep-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Semgrep Security Analysis Report</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      line-height: 1.6;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #f5f5f5;
                  }
                  .header {
                      background-color: #2196F3;
                      color: white;
                      padding: 20px;
                      border-radius: 8px;
                      margin-bottom: 20px;
                  }
                  .finding {
                      background-color: white;
                      border-radius: 8px;
                      padding: 20px;
                      margin-bottom: 20px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .severity-high {
                      border-left: 5px solid #ff4444;
                  }
                  .severity-medium {
                      border-left: 5px solid #ffbb33;
                  }
                  .severity-low {
                      border-left: 5px solid #00C851;
                  }
                  .severity-tag {
                      display: inline-block;
                      padding: 5px 10px;
                      border-radius: 4px;
                      color: white;
                      font-weight: bold;
                      margin-right: 10px;
                  }
                  .high { background-color: #ff4444; }
                  .medium { background-color: #ffbb33; }
                  .low { background-color: #00C851; }
                  pre {
                      background-color: #f8f9fa;
                      padding: 15px;
                      border-radius: 4px;
                      overflow-x: auto;
                  }
                  .file-path {
                      color: #666;
                      font-family: monospace;
                      margin-bottom: 10px;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>Semgrep Security Analysis Report</h1>
                  <p>Generated on <span id="date"></span></p>
              </div>
              <div id="findings"></div>

              <script>
                  // Obtener la fecha actual
                  document.getElementById('date').textContent = new Date().toLocaleDateString();

                  // Cargar y procesar el JSON
                  fetch('semgrep-results.json')
                      .then(response => response.json())
                      .then(data => {
                          const findingsDiv = document.getElementById('findings');
                          if (data.results && data.results.length > 0) {
                              data.results.forEach(result => {
                                  const findingDiv = document.createElement('div');
                                  findingDiv.className = 'finding severity-' + (result.extra.severity || 'medium').toLowerCase();
                                  
                                  const severityTag = document.createElement('span');
                                  severityTag.className = 'severity-tag ' + (result.extra.severity || 'medium').toLowerCase();
                                  severityTag.textContent = result.extra.severity || 'Medium';
                                  
                                  const content = `
                                      <h3>${result.check_id}</h3>
                                      ${severityTag.outerHTML}
                                      <p><strong>Message:</strong> ${result.extra.message}</p>
                                      <div class="file-path">
                                          <strong>File:</strong> ${result.path}:${result.start.line}
                                      </div>
                                      <pre><code>${result.extra.lines}</code></pre>
                                      ${result.extra.fix ? `<p><strong>Suggested Fix:</strong> ${result.extra.fix}</p>` : ''}
                                  `;
                                  
                                  findingDiv.innerHTML = content;
                                  findingsDiv.appendChild(findingDiv);
                              });
                          } else {
                              findingsDiv.innerHTML = '<div class="finding"><h3>No security issues found</h3><p>Great job! No vulnerabilities were detected in the scan.</p></div>';
                          }
                      })
                      .catch(error => {
                          document.getElementById('findings').innerHTML = `<div class="finding severity-high">
                              <h3>Error Loading Results</h3>
                              <p>There was an error loading the scan results: ${error.message}</p>
                          </div>`;
                      });
              </script>
          </body>
          </html>
          EOF
      
      # Snyk Analysis
      - uses: snyk/actions/setup@master
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Run Snyk test
        run: |
          mkdir -p reports/security
          snyk code test --json | snyk-to-html -o reports/security/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      # BDD Tests
      - name: Restore dependencies
        run: |
          cd PROYECTO_PDF
          dotnet restore
      
      - name: Build
        run: |
          cd PROYECTO_PDF
          dotnet build --no-restore
      
      - name: Run BDD Tests
        run: |
          cd PROYECTO_PDF
          dotnet test --filter "Category=BDD" --no-build --verbosity normal
      
      - name: Install SpecFlow Plus LivingDoc
        run: dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
      
      - name: Generate BDD Report
        run: |
          mkdir -p reports/bdd
          cd PROYECTO_PDF
          livingdoc test-assembly ./NegocioPDF.Tests/bin/Debug/net8.0/NegocioPDF.Tests.dll -t ./NegocioPDF.Tests/bin/Debug/net8.0/TestExecution.json -o ../reports/bdd/bdd-report.html

      # Create main dashboard
      - name: Create Dashboard
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Testing Results Dashboard</title>
            <style>
              body { 
                font-family: Arial; 
                max-width: 1200px; 
                margin: 0 auto; 
                padding: 20px; 
                background-color: #f5f5f5;
              }
              .card { 
                border: 1px solid #ddd; 
                padding: 20px; 
                margin: 20px 0; 
                border-radius: 8px;
                background-color: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              }
              .card h2 {
                color: #333;
                margin-top: 0;
                border-bottom: 2px solid #2196F3;
                padding-bottom: 10px;
              }
              .metric { 
                font-size: 24px; 
                color: #2196F3; 
              }
              a {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                transition: background-color 0.3s;
                margin: 5px;
              }
              a:hover {
                background-color: #1976D2;
              }
              .report-links {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
              }
            </style>
          </head>
          <body>
            <h1>Testing Results Dashboard</h1>
            
            <div class="card">
              <h2>Security Analysis</h2>
              <div class="report-links">
                <a href="security/semgrep-report.html">Semgrep Report</a>
                <a href="security/snyk-report.html">Snyk Report</a>
              </div>
            </div>
            
            <div class="card">
              <h2>BDD Test Results</h2>
              <a href="bdd/bdd-report.html">View BDD Test Report</a>
            </div>
          </body>
          </html>
          EOF

      # Deploy to gh-pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          force_orphan: true
